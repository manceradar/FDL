grammer: FDL
author: Aaron Woody
tabWidth: 2

#Tokens are checked in order of entry, it matters!!!
tokens:
  - regex:   '#.*'
    type:    COMMENT
  - regex:   "x'[0-9a-fA-F]+'"
    type:    BIT_INIT_HEX
  - regex:   "[b]?'[0-1]+'"
    type:    BIT_INIT_BIN
  - regex:   '\"[a-zA-Z]+\"'
    type:    STRING
  - regex:   '[a-zA-Z][a-zA-Z0-9_]*'
    type:    ID
  - regex:   '[0-9]+\.[0-9]*'
    type:    FLOAT
  - regex:   '[0-9]+'
    type:    INTEGER
  - regex:   '([Tt]rue|[Ff]alse)'
    type:    BOOLEAN
  - regex:   '\('
    type:    LPAREN
  - regex:   '\)'
    type:    RPAREN
  - regex:   '\['
    type:    LBRACK
  - regex:   '\]'
    type:    RBRACK
  - regex:   '\{'
    type:    LCURBRAC
  - regex:   '\}'
    type:    RCURBRAC
  - regex:   ':'
    type:    COLON
  - regex:   ','
    type:    COMMA
  - regex:   '\.'
    type:    DOT
  - regex:   '(\+\+|--|\+=|-=|/=|\*=)'
    type:    OPER_ASSIGN
  - regex:   '(==|\!=|\>=|\<=)'
    type:    LOGICAL
  - regex:   '(\+|-)'
    type:    ADD_SUB
  - regex:   '(\*|/)'
    type:    MUL_DIV
  - regex:   '&'
    type:    CAT
  - regex:   '='
    type:    ASSIGN
    
# Keywords are checked during ID tokens
keywords:
  - regex:   import
    type:    IMPORT
  - regex:   library
    type:    LIBRARY
  - regex:   module
    type:    MODULE
  - regex:   generics
    type:    GENERICS
  - regex:   ports
    type:    PORTS
  - regex:   in
    type:    INTERFACE_TYPE
  - regex:   out
    type:    INTERFACE_TYPE
  - regex:   master
    type:    INTERFACE_TYPE
  - regex:   slave
    type:    INTERFACE_TYPE
  - regex:   arch
    type:    ARCHBLOCK
  - regex:   signals
    type:    SIGNALBLOCK
  - regex:   logic
    type:    LOGICBLOCK
  - regex:   struct
    type:    TYPEDEF
  - regex:   interface
    type:    TYPEDEF
  - regex:   const
    type:    CONST
  - regex:   and
    type:    OPER
  - regex:   or
    type:    OPER
  - regex:   not
    type:    OPER
  - regex:   xor
    type:    OPER
  - regex:   nor
    type:    OPER
  - regex:   nand
    type:    OPER
  - regex:   pro
    type:    PROCESS
  - regex:   spro
    type:    SYNCPRO
  - regex:   apro
    type:    ASYNCPRO
    
# Parser format in order
syntax:
  types:
    - name: bit
      numArgs: [0]
      minArgs: 0
      maxArgs: 0
      argTypes: [[None]]
      tokens: BIT_INIT
    - name: sint
      numArgs: [1]
      minArgs: 1
      maxArgs: 1
      argTypes: [[INTEGER]]
      tokens: INTEGER
    - name: uint
      numArgs: [1]
      minArgs: 1
      maxArgs: 1
      argTypes: [[INTEGER]]
      tokens: INTEGER
    - name: float
      numArgs: [0]
      minArgs: 0
      maxArgs: 0
      argTypes: [[None]]
      tokens: FLOAT
    - name: string
      numArgs: [0]
      minArgs: 0
      maxArgs: 0
      argTypes: [[None]]
      tokens: STRING
    - name: bool
      numArgs: [0]
      minArgs: 0
      maxArgs: 0
      argTypes: [[None]]
      tokens: BOOLEAN
