#! Bit type header
## Implementations for all built in functions

import std.fmt
import std.ops.bitwise
import std.ops.cmp
import std.ops.concat

# Implementations for converting
impl bit:
  ## Convert to boolean type
  func to_bool(Self self) -> bool:
    declare:
      bool result
    logic:
      # Builtin source code
      attr (builtin = "bit_to_bool({0})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return result
      
  ## Convert to sint type
  func to_sint(Self* self) -> sint:
    declare:
      sint(self.len()) result
    logic:
      # Builtin source code
      attr (builtin = "signed({0})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return result
      
  ## Convert to uint type
  func to_uint(Self* self) -> uint:
    declare:
      uint(self.len()) result
    logic:
      # Builtin source code
      attr (builtin = "unsigned({0})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return result
  
# String format
impl fmt.Fmt for bit:
  # Convert to string
  func str(Self self, str formatspec = "b") -> str:
    declare:
      # String
      str result
    logic:
      # Call builtin vhdl string formatter
      attr (builtin = "strfmt({0}, {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return result
      
  func str(Self* self, str formatspec = "b") -> str:
    declare:
      # String
      str result
    logic:
      # Call builtin vhdl string formatter
      attr (builtin = "strfmt({0}, {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return result
      

# Concatenation
impl concat.Concat for bit

# Bitwise operators
impl bitwise.Not for bit:
  func not(Self self) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "not({0})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
impl bitwise.Not for bit*:
  func not(Self self) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "not({0})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.And for bit:
  func and(Self self, Self rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} and {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func and(Self* self, Self* rhs) -> Self*:
    logic:
      # Ensure vectors are same length
      assert (self.len() == rhs.len()):
        error("and function lengths do not match")
        
      # Builtin source code
      attr (builtin = "({0} and {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Or for bit:
  func or(Self self, Self rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} or {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func or(Self* self, Self* rhs) -> Self*:
    logic:
      # Ensure vectors are same length
      assert (self.len() == rhs.len()):
        error("or function lengths do not match")
        
      # Builtin source code
      attr (builtin = "({0} or {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Xor for bit:
  func xor(Self self, Self rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} xor {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func xor(Self* self, Self* rhs) -> Self*:
    logic:
      # Ensure vectors are same length
      assert (self.len() == rhs.len()):
        error("xor function lengths do not match")
        
      # Builtin source code
      attr (builtin = "({0} xor {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Nand for bit:
  func nand(Self self, Self rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} nand {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func nand(Self* self, Self* rhs) -> Self*:
    logic:
      # Ensure vectors are same length
      assert (self.len() == rhs.len()):
        error("nand function lengths do not match")
        
      # Builtin source code
      attr (builtin = "({0} nand {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Nor for bit:
  func nor(Self self, Self rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} nor {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func nor(Self* self, Self* rhs) -> Self*:
    logic:
      # Ensure vectors are same length
      assert (self.len() == rhs.len()):
        error("nor function lengths do not match")
        
      # Builtin source code
      attr (builtin = "({0} nor {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Xnor for bit:
  func xnor(Self self, Self rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} xnor {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func xnor(Self* self, Self* rhs) -> Self*:
    logic:
      # Ensure vectors are same length
      assert (self.len() == rhs.len()):
        error("xnor function lengths do not match")
        
      # Builtin source code
      attr (builtin = "({0} xnor {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.AndAssign for bit:
  func and_assign(Self self, Self rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "{0} <= ({0} and {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func and_assign(Self* self, Self* rhs) -> Self*:
    logic:
      # Ensure vectors are same length
      assert (self.len() == rhs.len()):
        error("and_assign function lengths do not match")
        
      # Builtin source code
      attr (builtin = "{0} <= ({0} and {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.OrAssign for bit:
  func or_assign(Self self, Self rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "{0} <= ({0} or {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func or_assign(Self* self, Self* rhs) -> Self*:
    logic:
      # Ensure vectors are same length
      assert (self.len() == rhs.len()):
        error("or_assign function lengths do not match")
        
      # Builtin source code
      attr (builtin = "{0} <= ({0} or {1})") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
# Bit to bool operators
impl bitwise.And<bool> for bit:
  func and(Self self, bool rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} and bool_to_bit({1}))") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Or<bool> for bit:
  func or(Self self, bool rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} or bool_to_bit({1}))") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Xor<bool> for bit:
  func xor(Self self, bool rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} xor bool_to_bit({1}))") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Nand<bool> for bit:
  func nand(Self self, bool rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} nand bool_to_bit({1}))") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Nor<bool> for bit:
  func nor(Self self, bool rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} nor bool_to_bit({1}))") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.Xnor<bool> for bit:
  func xnor(Self self, bool rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "({0} xnor bool_to_bit({1}))") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.AndAssign<bool> for bit:
  func and_assign(Self self, bool rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "{0} <= ({0} and bool_to_bit({1}))") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
    
impl bitwise.OrAssign<bool> for bit:
  func or_assign(Self self, bool rhs) -> Self:
    logic:
      # Builtin source code
      attr (builtin = "{0} <= ({0} or bool_to_bit({1}))") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
# Equality trait implementaion
impl cmp.Eq for bit:
  func eq(Self self, Rhs rhs) -> bool:
    logic:
      # Builtin source code
      attr (builtin = "({0} = {1}") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
  
  func eq(Self* self, Rhs* rhs) -> bool:
    logic:
      # Builtin source code
      attr (builtin = "({0} = {1}") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func ne(Self self, Rhs rhs) -> bool:
    logic:
      # Builtin source code
      attr (builtin = "({0} /= {1}") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
      
  func ne(Self* self, Rhs* rhs) -> bool:
    logic:
      # Builtin source code
      attr (builtin = "({0} /= {1}") for vhdl_93
      
      # Return bogus value for FDL type and size checking
      return self
