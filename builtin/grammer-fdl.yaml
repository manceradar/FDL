grammer: FDL
author: Aaron Woody

#Tokens are checked in order of entry, it matters!!!
tokens:
  - regex:   '#\!.*'
    type:    COMMENT_HEADER
  - regex:   '##.*'
    type:    COMMENT_FMT
  - regex:   '#.*'
    type:    COMMENT
  - regex:   "x'[0-9a-fA-F]+'"
    type:    BIT_INIT_HEX
  - regex:   "b?'[01ZXLH-]+'"
    type:    BIT_INIT_BIN
  - regex:   '\"([^"]|\\\")*\"'
    type:    STRING
  - regex:   '(True|False)'
    type:    BOOLEAN
  - regex:   '[a-zA-Z_][a-zA-Z0-9_]*'
    type:    ID
  - regex:   '[0-9]+\.[0-9]*'
    type:    FLOAT
  - regex:   '[0-9]+'
    type:    INTEGER
  - regex:   '\('
    type:    LPAREN
  - regex:   '\)'
    type:    RPAREN
  - regex:   '\['
    type:    LBRACK
  - regex:   '\]'
    type:    RBRACK
  - regex:   '\{'
    type:    LCURBRAC
  - regex:   '\}'
    type:    RCURBRAC
  - regex:   ':'
    type:    COLON
  - regex:   ','
    type:    COMMA
  - regex:   '\.'
    type:    DOT
  - regex:   '\|'
    type:    OR_BAR
  - regex:   '\-\>'
    type:    RARROW
  - regex:   '\^'
    type:    EXP_OPER
  - regex:   '(\+\+|--)'
    type:    POST_OPER
  - regex:   '(\+=|-=|/=|\*=)'
    type:    CMPD_ARITH_ASSIGN
  - regex:   '(&=|\|=)'
    type:    CMPD_LOGICAL_ASSIGN
  - regex:   '\>'
    type:    GT
  - regex:   '\<'
    type:    LT
  - regex:   '(==|\!=|\>=|\<=)'
    type:    RELATION_OPER
  - regex:   '\+'
    type:    ADD_OPER
  - regex:   '-'
    type:    SUB_OPER
  - regex:   '\*'
    type:    STAR
  - regex:   '/'
    type:    DIV
  - regex:   '&'
    type:    CAT
  - regex:   '='
    type:    ASSIGN
    
# Keywords are checked during ID tokens
keywords:
  - regex:   import
    type:    IMPORT
  - regex:   as
    type:    AS
  - regex:   library
    type:    LIBRARY
  - regex:   func
    type:    FUNC
  - regex:   enum
    type:    ENUM
  - regex:   struct
    type:    STRUCT
  - regex:   interface
    type:    INTERFACE
  - regex:   module
    type:    MODULE
  - regex:   blackbox
    type:    BLACKBOX
  - regex:   generics
    type:    GENERICS
  - regex:   ports
    type:    PORTS
  - regex:   'in|out|inout'
    type:    BASE_INTERFACE
  - regex:   'producer|consumer'
    type:    EXT_INTERFACE
  - regex:   arch
    type:    ARCH
  - regex:   task
    type:    TASK
  - regex:   declare
    type:    DECLARE
  - regex:   logic
    type:    LOGIC
  - regex:   rename
    type:    RENAME
  - regex:   for
    type:    FOR
  - regex:   continue
    type:    CONTINUE
  - regex:   case
    type:    CASE
  - regex:   const
    type:    CONST
  - regex:   'and|nand|or|nor|xor|xnor'
    type:    LOGICAL_OPER
  - regex:   'mod|rem'
    type:    MOD_REM_OPER
  - regex:   not
    type:    NOT_OPER
  - regex:   others
    type:    OTHERS
  - regex:   pro
    type:    PRO
  - regex:   spro
    type:    SPRO
  - regex:   apro
    type:    APRO
  - regex:   if
    type:    IF
  - regex:   elif
    type:    ELIF
  - regex:   else
    type:    ELSE
  - regex:   return
    type:    RETURN
  - regex:   assert
    type:    ASSERT
  - regex:   print
    type:    PRINT
  - regex:   warning
    type:    WARNING
  - regex:   error
    type:    ERROR
  - regex:   trait
    type:    TRAIT 
  - regex:   impl
    type:    IMPL
  - regex:   self
    type:    SELFVALUE
  - regex:   Self
    type:    SELFTYPE
  - regex:   attr
    type:    ATTR
    
    
#----------------------------------
# Builtin data types
#----------------------------------
types:
  - name: bit
    paramName: []
    paramTypeName: []
    paramTypeDim: []
    paramValue: []
  - name: bool
    paramName: []
    paramTypeName: []
    paramTypeDim: []
    paramValue: []
  - name: sint
    paramName: [bitWidth]
    paramTypeName: [uint]
    paramTypeDim: [0]
    paramValue: [32]
  - name: uint
    paramName: [bitWidth]
    paramTypeName: [uint]
    paramTypeDim: [0]
    paramValue: [32]
  - name: sfix
    paramName: [wholeBits, fracBits]
    paramTypeName: [uint, uint]
    paramTypeDim: [0, 0]
    paramValue: []
  - name: ufix
    paramName: [wholeBits, fracBits]
    paramTypeName: [uint, uint]
    paramTypeDim: [0, 0]
    paramValue: []
  - name: float
    paramName: []
    paramTypeName: []
    paramTypeDim: []
    paramValue: []
  - name: str
    paramName: []
    paramTypeName: []
    paramTypeDim: []
    paramValue: []
    
#----------------------------------
# Builtin attributes
#----------------------------------
attr:
  - name: len
    paramName: [dim]
    paramTypeName: [uint]
    paramTypeDim: [0]
    paramValue: [0]
    returnTypeName: [uint]
    returnTypeDim: [0]
  - name: left
    paramName: [dim]
    paramTypeName: [uint]
    paramTypeDim: [0]
    paramValue: [0]
    returnTypeName: [uint]
    returnTypeDim: [0]
  - name: right
    paramName: [dim]
    paramTypeName: [uint]
    paramTypeDim: [0]
    paramValue: [0]
    returnTypeName: [uint]
    returnTypeDim: [0]
  - name: range
    paramName: [dim]
    paramTypeName: [uint]
    paramTypeDim: [0]
    paramValue: [0]
    returnTypeName: [uint, uint, uint]
    returnTypeDim: [0, 0, 0]
  - name: ascending
    paramName: [dim]
    paramTypeName: [uint]
    paramTypeDim: [0]
    paramValue: [0]
    returnTypeName: [bool]
    returnTypeDim: [0]
  - name: valStr
    paramName: []
    paramTypeName: []
    paramTypeDim: []
    paramValue: []
    returnTypeName: [str]
    returnTypeDim: [0]
  - name: typeStr
    paramName: []
    paramTypeName: []
    paramTypeDim: []
    paramValue: []
    returnTypeName: [str]
    returnTypeDim: [0]
    
#----------------------------------
# Builtin functions
#----------------------------------

      
vhdl:
  fdlHeader: |
              ------------------------------------------------------
              -- File was created with FDL
              ------------------------------------------------------
  vhdlHeader: |
              library IEEE;
              use IEEE.STD_LOGIC_1164.ALL;
              use IEEE.NUMERIC_STD.ALL;
              use IEEE.MATH_REAL.ALL;
  module: |
          entity {0} is
          {1}
          end {0};
  genericDecl: |
            generic(
            {0}
            );
  genDecl: |
           '{0} : {1}{2}'
  portDecl: |
            '{0} : {1} {2}{3}'
  sigDecl: |
           'signal {0} : {1}{2}'
  constDecl: |
             'constant {0} : {1}{2}'
  declInit: |
            ' := {0}'
  portDecl: |
         port(
         {0}
         );
  arch: |
        architecture {0} of {1} is
        {2}
        begin
        {3}
        end {0};
  spro_1: |
          process({0})
          begin
            if {1}({0}) then
            {2}
            end if;
          end process;
  spro_2: |
          process({0})
          begin
            if {2}({0}) then
              if ({1} = {3}) then
              {4}
              else
              {5}
              end if;
            end if;
          end process;
  apro: |
        process({0},{1})
        begin
          if ({1} = {3}) then
            {4}
          elsif {2}({0}) then
            {5}
          end if;
        end process;
