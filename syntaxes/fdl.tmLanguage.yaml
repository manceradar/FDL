name: FDL
scopeName: source.fdl
patterns:
  - include: '#statement'
  - include: '#expression'
repository:
  impossible:
    comment: >-
      This is a special rule that should be used where no match is desired. It
      is not a good idea to match something like '1{0}' because in some cases
      that can result in infinite loops in token generation. So the rule instead
      matches and impossible expression to allow a match to fail and move to the
      next token.
    match: $.^
  statement:
    patterns:
      - include: '#import'
      - include: '#function-declaration'
      - include: '#semicolon'
  semicolon:
    patterns:
      - name: invalid.deprecated.semicolon.fdl
        match: \;$
  comments:
    patterns:
      - name: comment.line.number-sign.fdl
        contentName: meta.typehint.comment.fdl
        begin: |
          (?x)
            (?:
              \# \s* (type:)
              \s*+ (?# we want `\s*+` which is possessive quantifier since
                       we do not actually want to backtrack when matching
                       whitespace here)
              (?! $ | \#)
            )
        end: (?:$|(?=\#))
        beginCaptures:
          '0':
            name: meta.typehint.comment.fdl
          '1':
            name: comment.typehint.directive.notation.fdl
        patterns:
          - name: comment.typehint.ignore.notation.fdl
            match: |
              (?x)
                \G ignore
                (?= \s* (?: $ | \#))
          - name: comment.typehint.type.notation.fdl
            match: |
              (?x)
                (?<!\.)\b(
                  bool | bytes | float | int | object | str
                  | List | Dict | Iterable | Sequence | Set
                  | FrozenSet | Callable | Union | Tuple
                  | Any | None
                )\b
          - name: comment.typehint.punctuation.notation.fdl
            match: ([\[\]\(\),\.\=\*]|(->))
          - name: comment.typehint.variable.notation.fdl
            match: ([[:alpha:]_]\w*)
      - include: '#comments-base'
  punctuation:
    patterns:
      - name: punctuation.separator.colon.fdl
        match: ':'
      - name: punctuation.separator.element.fdl
        match: ','
  literal:
    patterns:
      - name: constant.language.fdl
        match: \b(True|False)\b
      - include: '#number'
  number:
    name: constant.numeric.fdl
    patterns:
      - include: '#number-float'
      - include: '#number-dec'
      - include: '#number-hex'
      - include: '#number-bin'
      - name: invalid.illegal.name.fdl
        match: \b[0-9]+\w+
  number-float:
    name: constant.numeric.float.fdl
    match: |
      (?x)
        (?<! \w)(?:
          (?:
            \.[0-9](?: _?[0-9] )*
            |
            [0-9](?: _?[0-9] )* \. [0-9](?: _?[0-9] )*
            |
            [0-9](?: _?[0-9] )* \.
          ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?
          |
          [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )
        )([jJ])?\b
    captures:
      '1':
        name: storage.type.imaginary.number.fdl
  number-dec:
    name: constant.numeric.dec.fdl
    match: |
      (?x)
        (?<![\w\.])(?:
            [1-9](?: _?[0-9] )*
            |
            0+
            |
            [0-9](?: _?[0-9] )* ([jJ])
            |
            0 ([0-9]+)(?![eE\.])
        )\b
    captures:
      '1':
        name: storage.type.imaginary.number.fdl
      '2':
        name: invalid.illegal.dec.fdl
  number-hex:
    name: constant.numeric.hex.fdl
    match: |
      (?x)
        (?<![\w\.])
          (0[xX]) (_?[0-9a-fA-F])+
        \b
    captures:
      '1':
        name: storage.type.number.fdl
  number-bin:
    name: constant.numeric.bin.fdl
    match: |
      (?x)
        (?<![\w\.])
          (0[bB]) (_?[01])+
        \b
    captures:
      '1':
        name: storage.type.number.fdl
  import:
    comment: |
      Import statements used to correctly mark `from`, `import`, and `as`
    patterns:
      - begin: \b(?<!\.)(from)\b(?=.+import)
        end: $|(?=import)
        beginCaptures:
          '1':
            name: keyword.control.import.fdl
        patterns:
          - name: punctuation.separator.period.fdl
            match: \.+
          - include: '#expression'
      - begin: \b(?<!\.)(import)\b
        end: $
        beginCaptures:
          '1':
            name: keyword.control.import.fdl
        patterns:
          - name: keyword.control.import.fdl
            match: \b(?<!\.)as\b
          - include: '#expression'
  function-declaration:
    name: meta.function.fdl
    begin: |
      (?x)
        \s*
        \b(func)\s+
          (?=
            [[:alpha:]_][[:word:]]* \s* \(
          )
    end: (:|(?=[#'"\n]))
    beginCaptures:
      '1':
        name: storage.type.function.fdl
    endCaptures:
      '1':
        name: punctuation.section.function.begin.fdl
    patterns:
      - include: '#function-def-name'
      - include: '#parameters'
      - include: '#line-continuation'
      - include: '#return-annotation'
  function-def-name:
    patterns:
      - include: '#illegal-object-name'
      - include: '#builtin-possible-callables'
      - name: entity.name.function.fdl
        match: |
          (?x)
            \b ([[:alpha:]_]\w*) \b
  parameters:
    name: meta.function.parameters.fdl
    begin: (\()
    end: (\))
    beginCaptures:
      '1':
        name: punctuation.definition.parameters.begin.fdl
    endCaptures:
      '1':
        name: punctuation.definition.parameters.end.fdl
    patterns:
      - name: keyword.operator.unpacking.parameter.fdl
        match: (\*\*|\*)
      - include: '#lambda-incomplete'
      - include: '#illegal-names'
      - include: '#illegal-object-name'
      - include: '#parameter-special'
      - match: |
          (?x)
            ([[:alpha:]_]\w*)
              \s* (?: (,) | (?=[)#\n=]))
        captures:
          '1':
            name: variable.parameter.function.language.fdl
          '2':
            name: punctuation.separator.parameters.fdl
      - include: '#comments'
      - include: '#loose-default'
      - include: '#annotated-parameter'
  parameter-special:
    match: |
      (?x)
        \b ((self)|(cls)) \b \s*(?:(,)|(?=\)))
    captures:
      '1':
        name: variable.parameter.function.language.fdl
      '2':
        name: variable.parameter.function.language.special.self.fdl
      '3':
        name: variable.parameter.function.language.special.cls.fdl
      '4':
        name: punctuation.separator.parameters.fdl
  loose-default:
    begin: (=)
    end: (,)|(?=\))
    beginCaptures:
      '1':
        name: keyword.operator.fdl
    endCaptures:
      '1':
        name: punctuation.separator.parameters.fdl
    patterns:
      - include: '#expression'
  annotated-parameter:
    begin: |
      (?x)
        \b
        ([[:alpha:]_]\w*) \s* (:)
    end: (,)|(?=\))
    beginCaptures:
      '1':
        name: variable.parameter.function.language.fdl
      '2':
        name: punctuation.separator.annotation.fdl
    endCaptures:
      '1':
        name: punctuation.separator.parameters.fdl
    patterns:
      - include: '#expression'
      - name: keyword.operator.assignment.fdl
        match: '=(?!=)'
  return-annotation:
    begin: (->)
    end: (?=:)
    beginCaptures:
      '1':
        name: punctuation.separator.annotation.result.fdl
    patterns:
      - include: '#expression'
  item-access:
    patterns:
      - name: meta.item-access.fdl
        begin: |
          (?x)
            \b(?=
              [[:alpha:]_]\w* \s* \[
            )
        end: (\])
        endCaptures:
          '1':
            name: punctuation.definition.arguments.end.fdl
        patterns:
          - include: '#item-name'
          - include: '#item-index'
          - include: '#expression'
  item-name:
    patterns:
      - include: '#special-variables'
      - include: '#builtin-functions'
      - include: '#special-names'
      - name: meta.indexed-name.fdl
        match: |
          (?x)
            \b ([[:alpha:]_]\w*) \b
  item-index:
    begin: (\[)
    end: (?=\])
    beginCaptures:
      '1':
        name: punctuation.definition.arguments.begin.fdl
    contentName: meta.item-access.arguments.fdl
    patterns:
      - name: punctuation.separator.slice.fdl
        match: ':'
      - include: '#expression'
  codetags:
    match: (?:\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\b)
    captures:
      '1':
        name: keyword.codetag.notation.fdl
  comments-base:
    name: comment.line.number-sign.fdl
    begin: (\#)
    beginCaptures:
      '1':
        name: punctuation.definition.comment.fdl
    end: ($)
    patterns:
      - include: '#codetags'

